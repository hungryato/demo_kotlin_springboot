package com.example.demo

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.data.relational.core.mapping.Table
import org.springframework.data.repository.CrudRepository
import org.springframework.stereotype.Service
import org.springframework.web.bind.annotation.*
import java.util.*


@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
	runApplication<DemoApplication>(*args)
}

@RestController
class MessageController(val service: MessageService) {
	@GetMapping("/")
	fun index(): List<Message> = service.findMessages()

	@GetMapping("/{id}")
	fun index(@PathVariable id: String): List<Message> =
		service.findMessageById(id)

	@PostMapping("/")
	fun post(@RequestBody message: Message) {
		service.save(message)
	}
}

@Table("MESSAGES")
data class Message(val id: String?, val text: String)

/**
 * [Extension functions]
 *
 * The return type of the findById() function in the CrudRepository interface is an instance of the Optional class.
 * However, it would be convenient to return a List with a single message for consistency.
 * For that, you need to unwrap the Optional value if it’s present, and return a list with the value.
 * This can be implemented as an extension function to the Optional type.
 *
 * In the code, Optional<out T>.toList(), .toList() is the extension function for Optional.
 * Extension functions allow you to write additional functions to any classes, which is especially useful when you want to extend functionality of some library class.
 */
@Service
class MessageService(val db: MessageRepository) {
	fun findMessages(): List<Message> = db.findAll().toList()

	fun findMessageById(id: String): List<Message> = db.findById(id).toList()

	fun save(message: Message) {
		db.save(message)
	}

	fun <T : Any> Optional<out T>.toList(): List<T> =
		if (isPresent) listOf((get())) else emptyList()
}

/**
 * [CrudRepository save() function]
 *
 * This function works with an assumption that the new object doesn’t have an id in the database.
 * Hence, the id should be null for insertion.
 *
 * If the id isn’t null, CrudRepository assumes that the object already exists in the database and this is an update operation as opposed to an insert operation.
 * After the insert operation, the id will be generated by the data store and assigned back to the Message instance.
 * This is why the id property should be declared using the var keyword.
 */
interface MessageRepository: CrudRepository<Message, String>